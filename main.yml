---
- name: DotFiles Config
  hosts: localhost
  connection: local
  gather_facts: true  # Ensure facts are gathered to use Ansible's default OS facts as well

  pre_tasks:
    - name: Detect WSL, Windows, and Ubuntu
      ansible.builtin.import_tasks: pre_tasks/detect_wsl.yml
      tags:
        - always

    - name: Detect wsl variable
      ansible.builtin.debug:
        var: ansible_host_environment_is_wsl
      tags:
        - always

    - name: Confirm PowerShell Execution Policy
      ansible.builtin.import_tasks: pre_tasks/powershell_executionpolicy.yml
      when: ansible_host_environment_is_wsl or ansible_host_environment_is_windows
      tags:
        - always

    - name: Detect Host User
      ansible.builtin.import_tasks: pre_tasks/whoami.yml
      tags:
        - always

  tasks:
    - name: Set roles 
      ansible.builtin.set_fact:
        run_roles: "{{ ansible_run_tags != ['all'] and ansible_run_tags or default_roles | difference(exclude_roles | default([])) }}"
      tags:
        - always

    - name: Display roles and environment info
      ansible.builtin.debug:
        msg: "Running on WSL: {{ ansible_host_environment_is_wsl }}, Windows: {{ ansible_host_environment_is_windows }}, Ubuntu: {{ ansible_host_environment_is_ubuntu }}, OS Family: {{ ansible_os_family }} | Roles: {{ run_roles }}"
      tags:
        - always

    - name: Run roles (only if not NixOS)
      ansible.builtin.include_role:
        apply:
          tags:
            - "{{ roles_item }}"
        name: "{{ roles_item }}"
      loop_control:
        loop_var: roles_item
      with_items: "{{ run_roles }}"
      when: ansible_os_family != "NixOS"  # Exclude NixOS
      tags:
        - always
    
    # Run tmux and neovim roles specifically on NixOS
    - name: Run tmux and neovim roles for NixOS
      ansible.builtin.include_role:
        apply:
          tags:
            - "{{ roles_item }}"
        name: "{{ roles_item }}"
      loop_control:
        loop_var: roles_item
      with_items:
        - neovim
      when: ansible_os_family == "NixOS"  # Only for NixOS
      tags:
        - always

    - name: Run the NixOS configuration script
      ansible.builtin.shell: |
        bash  ./install.sh \
          -u "{{ nixos_username }}" \
          -h "{{ nixos_host }}" \
          {% if skip_confirm is defined and skip_confirm %}-c {% endif %}
      args:
        chdir: "{{ ansible_user_dir }}/.dotfiles/nixos-config"
      register: script_output
      when: ansible_os_family == "NixOS"
      tags:
        - always
